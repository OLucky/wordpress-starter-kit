<?php
function get_resource($type)
{
  if (!file_exists(get_stylesheet_directory() . '/emitted-assets/' . $type)) {
    return [];
  }

  $resourceDir = opendir(get_stylesheet_directory() . '/emitted-assets/' . $type);
  $allowedSuffixes = ['legacy', 'modern', 'dev'];
  $stylesArray = array();

  while ($file = readdir($resourceDir)) {
    if ($file != '.' && $file != '..') {
      $fullName = $file;
      preg_match_all("/^\w+\./", $fullName, $nameMatch, PREG_PATTERN_ORDER);
      preg_match_all("/\.\w+\./", $fullName, $suffixMatch, PREG_PATTERN_ORDER);
      $styleProps = array('fullName' => $fullName, 'name' => str_replace('.', '', $nameMatch[0][0]), 'suffix' => str_replace('.', '', $suffixMatch[0][0]));

      if (!in_array($styleProps['suffix'], $allowedSuffixes)) {
        $styleProps['suffix'] = '';
      }
      array_push($stylesArray, $styleProps);
    }
  }
  return $stylesArray;
}

function should_be_included($resource, $suffix)
{
  if ($resource['suffix'] == $suffix || $resource['suffix'] == 'dev') {
    return true;
  }
  return false;
}

function load_resources($suffix)
{
  global $theme_path;

  $stylesArray = get_resource('css');
  $scriptsArray = get_resource('js');

  //Take vendors script out of scriptsArray
  $vendorsArray = [];
  foreach ($scriptsArray as $key => $script) {
    if ($script['name'] === 'vendors') {
      array_push($vendorsArray, $script);
      unset($scriptsArray[$key]);
    }
  }

  foreach ($stylesArray as $style) {
    if (should_be_included($style, $suffix)) {
      wp_enqueue_style($style['name'], $theme_path . '/emitted-assets/css/' . $style['fullName']);
    }
  }

  //include vendors before other scripts
  foreach ($vendorsArray as $script) {
    if (should_be_included($script, $suffix)) {
      wp_enqueue_script($script['name'], $theme_path . '/emitted-assets/js/' . $script['fullName'], null, null, true);
    }
  }

  foreach ($scriptsArray as $script) {
    if (should_be_included($script, $suffix)) {
      wp_enqueue_script($script['name'], $theme_path . '/emitted-assets/js/' . $script['fullName'], ['vendors'], null, true);
    }
  }
}

function load_static_resources()
{
  //put here scripts, styles etc. that are not generated by Webpack.
}

function is_modern_browser($user_browser)
{
  //Based on IntersectionObserver support
  $modern_browsers = [
    'Chrome' => 58,
    'Chromium' => 58,
    'Opera' => 55,
    'Safari' => 12.1,
    'iOS Safari' => 12.2,
    'Firefox' => 55,
    'Edge' => 16,
  ];

  $user_browser_name = $user_browser['browser'];
  $user_browser_version = $user_browser['version'];

  if($user_browser_name == 'Safari' && $user_browser['platform'] == 'iOS') {
    $user_browser_name = $user_browser['platform'] . ' ' . $user_browser_name;
  }

  if (!array_key_exists($user_browser_name, $modern_browsers) || (floatval($user_browser_version) <= $modern_browsers[$user_browser_name] && floatval($user_browser_version) !== 0.0)) {
    return false;
  }
  else {
    return true;
  }
}

function select_resources_to_load()
{
  global $is_IE;

  $use_modern = ini_get('browscap') ? is_modern_browser(get_browser(null, true)) : false;

  $suffix = $use_modern ? 'modern' : 'legacy';

  load_resources($suffix);
  load_static_resources();

  wp_localize_script('app', 'ajaxConfig', [
    'ajaxUrl' => admin_url('admin-ajax.php'),
    'wpNonce' => wp_create_nonce('any_value_here'),
  ]);
}

add_action('wp_enqueue_scripts', 'select_resources_to_load');